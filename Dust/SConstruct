from SCons.Util import flatten
import os

Import('env')
if not env: env = Environment(tools=['default', 'mono'])

# GameClay.Dust.dll files
core = Glob('*.cs', strings=True) + Glob('Core/*.cs', strings=True)
effecters = Glob('Effecter/*.cs', strings=True)
emitters = Glob('Emitter/*.cs', strings=True)
math = Glob('MathF/*.cs', strings=True)
parameters = Glob('Parameter/*.cs', strings=True)
properties = Glob('Properties/*.cs', strings=True)
simulations = Glob('Simulation/*.cs', strings=True)

# Code which is for test purposes only
test_code = ['Simulation/HorribleSimulation.cs']

# Excluded files
excluded_files = test_code

# Assemble all the source files for this configuration
dust_files = core + effecters + emitters + math + parameters + properties + simulations
dust_files = [f for f in dust_files if f not in excluded_files]

# Build core library
dust_cli = env.CLILibrary('GameClay.Dust.dll',
	dust_files,
	CSCLIBFLAGS=['']
)
env.Install('lib/', dust_cli)

# Build unsafe extensions
dust_unsafe = SConscript(['Unsafe/SConstruct'], ['env'])
env.Requires(dust_unsafe, dust_cli)
env.Install('lib/', dust_unsafe)

# Build Mono extensions
dust_mono_cli = SConscript(['Mono/SConstruct'], ['env'])
env.Requires(dust_mono_cli, dust_cli)
env.Install('lib/', dust_mono_cli)