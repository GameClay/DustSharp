from SCons.Util import flatten
import os

env = Environment(tools=['default', 'mono'])

# 
core = Glob('*.cs', strings=True) + Glob('Core/*.cs', strings=True)
effecters = Glob('Effecter/*.cs', strings=True)
emitters = Glob('Emission/*.cs', strings=True)
math = Glob('Math/*.cs', strings=True)
parameters = Glob('Parameter/*.cs', strings=True)
properties = Glob('Properties/*.cs', strings=True)
simulations = Glob('Simulation/*.cs', strings=True)

# Code which is for test purposes only
test_code = ['Simulation/HorribleSimulation.cs'] + ['Emission/BoxEmitter.cs', 'Emission/RingEmitter.cs']

# Todo: Optional XNA support?
xna_code = ['']

# Todo: Optional unsafe code compile flag
# Code which requires the unsafe compile option
unsafe_code = Glob('Simulation/Unsafe*.cs', strings=True) + Glob('Simulation/Unmanaged*.cs', strings=True)

# Todo: Optional Mono.Simd support
# Code which requires the Mono.Simd library
simd_code = ['Simulation/MonoSimdSimulation.cs']

# Excluded files
excluded_files = effecters + parameters + test_code + unsafe_code + simd_code + xna_code

# Assemble all the source files for this configuration
dust_files = core + emitters + math + simulations
dust_files = [f for f in dust_files if f not in excluded_files]

# Build the output library
dust_cli = env.CLILibrary('GameClay.Dust.dll',
	dust_files,
	CSCLIBFLAGS=[]
)
Return('dust_cli')